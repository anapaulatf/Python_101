## *** SQL Coursera *** ##


Data model building blocks
1. one to many
2. many to many
3. one to one

ER Diagrams
- entity types and relations betwneen each other
Examples:
- chen notation
- crow's foot notation
- UML class diagram notation

Primary Key
- column whose values identify each row

Foreign Key
- columns that can be used to identify a row in another table


## RETRIEVING DATA WITH *SELECT* 

SELECT <column>
FROM <table>;

-> for multiple columns

SELECT <column1, column2, column3>
FROM <table>;

-> for all columns

SELECT *
FROM <table>;

-> for a number of records (rows)
SELECT <columns>
FROM <table>
LIMIT <number>;


## CREATING TABLES

INSERT INTO  <table>
VALUES (<value1, value2, value3>);

Example:
INSERT INTO Shoes
	(Id,
	Brand,
	Type,
	Color,
	Price,
	Desc
	)
VALUES('14535974',
	'Gucci',
	'Slippers',
	'Pink',
	'695.00',
	NULL
		);

		
CREATING TEMPORARY TABLES

CREATE TEMPORARY TABLE <temporary> AS
	(
		SELECT <column>
		FROM <table>
		WHERE <value>
	)
	
Example:
CREATE TEMPORARY TABLE Sandals AS
	(
		SELECT *
		FROM shoes
		WHERE shoe_type = 'sandals'
	)
	
##### SEMANA 2 ########## SEMANA 2 #####
##### SEMANA 2 ########## SEMANA 2 #####
##### SEMANA 2 ########## SEMANA 2 #####

--------------------------
NEW CLAUSES AND OPERATORS 
--------------------------
WHERE
BETWEEN
IN
OR
NOT 
LIKE
ORDER BY
GROUP BY

----------
FILTERING
----------
WHERE
BETWEEN
NULL

SELECT <column1>, <column2>
FROM <table>
WHERE <column1> <operator> <value>

<operator>
= 
<> (not equal)
>
<
>=
<= 
BETWEEN 
IS NULL


Examples:
SELECT ProductName,UnitPrice,SupplierID
FROM Products
WHERE UnitPrice >= 75;

SELECT ProductName,UnitPrice,SupplierID,UnitsInStock
FROM Products
WHERE UnitsInStock BETWEEN 15 AND 80;

------------------
ADVANCED FILTERING
------------------
IN
OR
NOT

Examples:
SELECT ProductName,UnitPrice,SupplierID
FROM Products
WHERE ProductName = 'Tofu' OR 'Konbu';

SELECT ProductName,UnitPrice,SupplierID,UnitsInStock
FROM Products
WHERE (UnitsInStock = 9 OR UnitsInStock = 11)  # é preciso colocar os parenteses para que o SQL possa ler na ordem
AND UnitPrice > 15;

SELECT * 
FROM Employees
WHERE NOT City='London' AND NOT City='Seatlle';

----------------
WILDCARDS IN SQL
----------------
Predicate LIKE

-> Using % Wildcards
'%Pizza' - seleciona tudo que termina com a palavra Pizza
'Pizza%' - seleciona tudo o que começa com a palavra Pizza
'%Pizza%' - seleciona tudo que no meio há Pizza

'S%E' - seleciona tudo que começa com S e termina com E
't%@gmail.com' - seleciona todos os endereços gmail que começam com t

------------
SORTING DATA
------------
ORDER BY

SELECT <column>
FROM <table>
ORDER BY <characteristic>

ORDER BY 2,3
2 -> segunda coluna
3 -> terceira coluna

ORDER BY DESC/ASC

---------------
MATH OPERATORS 
---------------
+ - * / 

Example:
SELECT ProductID,
	UnitsOnOrder,
	UnitPrice,
	UnitsOnOrder * UnitPrice AS Total_Order_Cost
FROM Products;

SELECT ProductID,
	UnitsOnOrder,
	UnitPrice,
	Discount,
	(UnitPrice - Discount)/Quantity AS Total_Cost
FROM OrderDetails;


-----> AGGREGATE FUNCTIONS
AVERAGE - AVG()
COUNT - COUNT()
MAX - MAX()
MIN - MIN()
SUM - SUM() 
DISTINCT


Exemplos:
SELECT AVG(UnitPrice) AS avg_price
FROM products;

SELECT SUM(UnitPrice*UnitsInStock) AS total_price
FROM products
WHERE SupplierID = 23;

SELECT COUNT(DISTINCT CustomereID)
FROM Customers;

-------------
GROUPING DATA
-------------

SELECT Region,
	COUNT(CustomerID) AS total_customers
FROM Customers
GROUP BY Region;

HAVING
-> WHERE não funciona para grupos. WHERE filtra linhas. Use HAVING para filtrar grupos.
-> WHERE filtra ANTES da agrupar os dados. HAVING filtra APÓS terem sido agrupados.

Example:
SELECT CustomerID, COUNT (*) AS orders
FROM Orders
GROUP BY CustomerID
HAVING COUNT (*) >= 2;




